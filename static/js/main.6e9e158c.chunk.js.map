{"version":3,"sources":["img/mario.png","img/mushroom.png","img/arrow.png","components/GridCell.js","components/Grid.js","App.js","components/Modal.js","Main.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","style","gridCell","backgroundColor","height","React","memo","_ref","mushroom","mario","src","marioImg","mshImg","react_default","a","createElement","marginTop","width","alt","display","gridGap","padding","margin","rows","columns","marioPos","mushroomsPos","colArr","Array","from","length","x","i","rowArr","gridTemplateColumns","repeat","cells","map","y","currentPos","marioLocation","components_GridCell","includes","key","Object","objectSpread","initialState","direction","mushrooms","arr","r","Math","floor","random","indexOf","push","generateRandomNumbers","timer","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkMushroom","_this$state","state","filter","m","moveMario","_this$state2","position","toConsumableArray","_this$props","updateMove","changeStatus","changeDirection","keyCode","setState","clearInterval","moveMarioInterval","setInterval","_grid","focus","prevprops","_this$props2","status","_this2","_this$props3","travelledCells","ref","c","tabIndex","onKeyDown","components_Grid","arrow","Component","Modal","open","index_es","aria-labelledby","id","textAlign","variant","onClick","aria-label","Main","handleChange","size","event","target","value","match","defineProperty","Number","renderSizeComp","label","onChange","disabled","container","item","xs","md","lg","src_App","components_Modal","Boolean","window","location","hostname","ReactDOM","render","src_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e9e158c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mario.dbe70930.png\";","module.exports = __webpack_public_path__ + \"static/media/mushroom.0ad9b5a9.png\";","module.exports = __webpack_public_path__ + \"static/media/arrow.e4a9dc72.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport marioImg from '../img/mario.png';\nimport mshImg from '../img/mushroom.png';\n\nconst style = {\n  gridCell: {\n    backgroundColor: '#fff',\n    height: 40\n  }\n};\n\nconst GridCell = ({ mushroom, mario }) => {\n  const src = (mario && marioImg) || (mushroom && mshImg);\n  return (\n    <div style={style.gridCell}>\n      {src && (\n        <img\n          style={{ marginTop: mario ? 0 : 5 }}\n          width={30}\n          height={mario ? 40 : 30}\n          alt=\"mushroom\"\n          src={src}\n        />\n      )}\n    </div>\n  );\n};\n\nGridCell.propTypes = {\n  mario: PropTypes.bool.isRequired,\n  mushroom: PropTypes.bool.isRequired\n};\n\nexport default React.memo(GridCell);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GridCell from './GridCell';\n\nconst style = {\n  grid: {\n    display: 'grid',\n    gridGap: 2,\n    backgroundColor: 'lightgrey',\n    padding: 2,\n    margin: '0 auto'\n  }\n};\n\nconst Grid = ({ rows, columns, marioPos, mushroomsPos }) => {\n  const colArr = Array.from({ length: columns }, (x, i) => i);\n  const rowArr = Array.from({ length: rows }, (x, i) => i);\n  const width = columns * 40 + 2 * columns + 2;\n  const gridTemplateColumns = '40px '.repeat(columns);\n  const cells = rowArr.map(x =>\n    colArr.map(y => {\n      const currentPos = x * columns + y + 1;\n      const marioLocation = marioPos[0] * columns + marioPos[1] + 1;\n      return (\n        <GridCell\n          mushroom={mushroomsPos.includes(currentPos)}\n          mario={marioLocation === currentPos}\n          key={x + ' ' + y}\n        />\n      );\n    })\n  );\n  return (\n    <div\n      style={{\n        ...style.grid,\n        width: width,\n        gridTemplateColumns: gridTemplateColumns\n      }}\n    >\n      {cells}\n    </div>\n  );\n};\n\nGrid.propTypes = {\n  columns: PropTypes.number.isRequired,\n  rows: PropTypes.number.isRequired,\n  marioPos: PropTypes.array.isRequired,\n  mushroomsPos: PropTypes.array.isRequired\n};\n\nexport default React.memo(Grid);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from './components/Grid';\nimport arrow from './img/arrow.png';\n\nconst generateRandomNumbers = (rows, columns) => {\n  const arr = [];\n  while (arr.length < rows) {\n    const r = Math.floor(Math.random() * rows * columns) + 1;\n    if (arr.indexOf(r) === -1) arr.push(r);\n  }\n  return arr;\n};\n\nconst initialState = (rows, columns) => ({\n  direction: null,\n  currentPos: [0, 0],\n  mushrooms: generateRandomNumbers(rows, columns),\n  timer: false\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState(props.rows, props.columns);\n  }\n\n  componentDidMount() {\n    this._grid.focus();\n  }\n\n  componentDidUpdate(prevprops) {\n    const { status, rows, columns } = this.props;\n    if (prevprops.status === 2 && status === 1) {\n      this.setState(initialState(rows, columns));\n    }\n  }\n\n  checkMushroom = () => {\n    let { mushrooms, currentPos } = this.state;\n    const { columns } = this.props;\n    const marioLocation = currentPos[0] * columns + currentPos[1] + 1;\n    const eatenMushroom = mushrooms.indexOf(marioLocation);\n    if (eatenMushroom > -1)\n      mushrooms = mushrooms.filter(m => m !== marioLocation);\n    return mushrooms;\n  };\n\n  moveMario = () => {\n    const { currentPos, direction } = this.state;\n    const position = [...currentPos];\n    const { rows, columns, updateMove, changeStatus } = this.props;\n    const mushrooms = this.checkMushroom();\n\n    if (mushrooms.length > 0) {\n      switch (direction) {\n        // down\n        case 40:\n          if (position[0] === rows - 1) {\n            position[0] -= 1;\n            this.changeDirection({ keyCode: 38 });\n          } else position[0] += 1;\n          break;\n        // up\n        case 38:\n          if (position[0] === 0) {\n            position[0] += 1;\n            this.changeDirection({ keyCode: 40 });\n          } else position[0] -= 1;\n          break;\n        // right\n        case 39:\n          if (position[1] === columns - 1) {\n            position[1] -= 1;\n            this.changeDirection({ keyCode: 37 });\n          } else position[1] += 1;\n          break;\n        // left\n        case 37:\n          if (position[1] === 0) {\n            position[1] += 1;\n            this.changeDirection({ keyCode: 39 });\n          } else position[1] -= 1;\n          break;\n        default:\n          break;\n      }\n      this.setState({\n        currentPos: position,\n        mushrooms\n      });\n      updateMove();\n    } else {\n      changeStatus(2);\n      clearInterval(this.moveMarioInterval);\n    }\n  };\n\n  changeDirection = ({ keyCode }) => {\n    let { timer } = this.state;\n    if ([37, 38, 39, 40].includes(keyCode) && this.state.mushrooms.length > 0) {\n      if (!timer) {\n        timer = true;\n        this.moveMarioInterval = setInterval(this.moveMario, 300);\n      }\n      this.setState({ direction: keyCode, timer });\n    }\n  };\n\n  render() {\n    const { rows, columns, travelledCells } = this.props;\n    return (\n      <div\n        ref={c => (this._grid = c)}\n        tabIndex=\"0\"\n        onKeyDown={this.changeDirection}\n        style={{ height: '100vh' }}\n      >\n        <h2 style={{ padding: '20px 0 20px 0' }}>\n          Total Moves: {travelledCells}\n        </h2>\n        <Grid\n          mushroomsPos={this.state.mushrooms}\n          rows={rows}\n          columns={columns}\n          marioPos={this.state.currentPos}\n        />\n        <div>\n          <img width={100} src={arrow} alt={'arrow'} />\n          <p>Use above keys to navigate Mario</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  columns: PropTypes.number.isRequired,\n  rows: PropTypes.number.isRequired,\n  status: PropTypes.number.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  travelledCells: PropTypes.number.isRequired,\n  updateMove: PropTypes.func.isRequired\n};\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DialogTitle, Dialog, Fab, Icon } from '@material-ui/core';\n\nconst Modal = ({ open, travelledCells, changeStatus }) => {\n  return (\n    <Dialog open={open} aria-labelledby=\"simple-dialog-title\">\n      <DialogTitle id=\"simple-dialog-title\">Game Finished</DialogTitle>\n      <div style={{ width: 250, textAlign: 'center' }}>\n        <p>Total move to save Princess: {travelledCells}</p>\n        <Fab\n          style={{ margin: 15 }}\n          variant=\"extended\"\n          onClick={() => changeStatus(1)}\n          aria-label=\"Restart\"\n        >\n          <Icon>refresh</Icon> Restart\n        </Fab>\n      </div>\n    </Dialog>\n  );\n};\n\nModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  travelledCells: PropTypes.number.isRequired\n};\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport { TextField, Button, Grid as Container } from '@material-ui/core';\nimport App from './App';\nimport Modal from './components/Modal';\n\nclass Main extends Component {\n  state = {\n    rows: '',\n    columns: '',\n    status: 0,\n    travelledCells: 0\n  };\n\n  handleChange = size => event => {\n    const numbers = /^(\\s*|\\d+)$/;\n    if (event.target.value.match(numbers))\n      this.setState({\n        [size]: Number(event.target.value)\n      });\n  };\n\n  changeStatus = status => {\n    let { travelledCells } = this.state;\n    if (status === 1) travelledCells = 0;\n    this.setState({ status, travelledCells });\n  };\n\n  renderSizeComp = () => {\n    const { columns, rows } = this.state;\n    return (\n      <div style={{ marginTop: '10%' }}>\n        <TextField\n          label=\"Rows\"\n          value={this.state.rows}\n          onChange={this.handleChange('rows')}\n          margin=\"normal\"\n        />\n        <br />\n        <TextField\n          label=\"Columns\"\n          value={this.state.columns}\n          onChange={this.handleChange('columns')}\n          margin=\"normal\"\n        />\n        <br />\n        <Button\n          style={{ backgroundColor: 'grey' }}\n          onClick={() => this.changeStatus(1)}\n          disabled={!(columns > 0 && rows > 0)}\n        >\n          Submit\n        </Button>\n      </div>\n    );\n  };\n\n  updateMove = () =>\n    this.setState({ travelledCells: this.state.travelledCells + 1 });\n\n  render() {\n    const { columns, rows, travelledCells, status } = this.state;\n    return (\n      <Container container style={{ textAlign: 'center' }}>\n        <Container item xs={12} md={9} lg={12}>\n          {status === 0 ? (\n            this.renderSizeComp()\n          ) : (\n            <App\n              columns={columns}\n              rows={rows}\n              changeStatus={this.changeStatus}\n              travelledCells={travelledCells}\n              updateMove={this.updateMove}\n              status={status}\n            />\n          )}\n          <Modal\n            changeStatus={this.changeStatus}\n            travelledCells={travelledCells}\n            open={status === 2}\n          />\n        </Container>\n      </Container>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}